"use strict";(self.webpackChunkmycelium=self.webpackChunkmycelium||[]).push([[8925],{4806:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});var r=l(4848),s=l(8453);const i={tags:["JavaScript","React","Variables"]},a="Les variables",t={id:"Cours/JavaScript/JS+ReactJS/Les-variables",title:"Les variables",description:"Que sont les variables en JS et comment les utiliser ?",source:"@site/docs/Cours/JavaScript/JS+ReactJS/Les-variables.md",sourceDirName:"Cours/JavaScript/JS+ReactJS",slug:"/Cours/JavaScript/JS+ReactJS/Les-variables",permalink:"/mycelium/docs/Cours/JavaScript/JS+ReactJS/Les-variables",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Cours/JavaScript/JS+ReactJS/Les-variables.md",tags:[{inline:!0,label:"JavaScript",permalink:"/mycelium/docs/tags/java-script"},{inline:!0,label:"React",permalink:"/mycelium/docs/tags/react"},{inline:!0,label:"Variables",permalink:"/mycelium/docs/tags/variables"}],version:"current",frontMatter:{tags:["JavaScript","React","Variables"]},sidebar:"tutorialSidebar",previous:{title:"Les types de donn\xe9es",permalink:"/mycelium/docs/Cours/JavaScript/JS+ReactJS/Les-types-de-donnees"},next:{title:"Utilisation de console en JS",permalink:"/mycelium/docs/Cours/JavaScript/JS+ReactJS/Utilisation-console"}},c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"1. <code>var</code>",id:"1-var",level:2},{value:"R\xf4le",id:"r\xf4le",level:3},{value:"Exemple",id:"exemple",level:3},{value:"Exemple en React",id:"exemple-en-react",level:4},{value:"Contre-exemple",id:"contre-exemple",level:3},{value:"Contre-exemple en React",id:"contre-exemple-en-react",level:4},{value:"Avantages",id:"avantages",level:3},{value:"Inconv\xe9nients",id:"inconv\xe9nients",level:3},{value:"Quand l&#39;utiliser",id:"quand-lutiliser",level:3},{value:"2. <code>let</code>",id:"2-let",level:2},{value:"R\xf4le",id:"r\xf4le-1",level:3},{value:"Exemple",id:"exemple-1",level:3},{value:"Exemple en React",id:"exemple-en-react-1",level:4},{value:"Contre-exemple",id:"contre-exemple-1",level:3},{value:"Contre-exemple en React",id:"contre-exemple-en-react-1",level:4},{value:"Avantages",id:"avantages-1",level:3},{value:"Inconv\xe9nients",id:"inconv\xe9nients-1",level:3},{value:"Quand l&#39;utiliser",id:"quand-lutiliser-1",level:3},{value:"3. <code>const</code>",id:"3-const",level:2},{value:"R\xf4le",id:"r\xf4le-2",level:3},{value:"Exemple",id:"exemple-2",level:3},{value:"Exemple en React",id:"exemple-en-react-2",level:4},{value:"Contre-exemple",id:"contre-exemple-2",level:3},{value:"Contre-exemple en React",id:"contre-exemple-en-react-2",level:4},{value:"Avantages",id:"avantages-2",level:3},{value:"Inconv\xe9nients",id:"inconv\xe9nients-2",level:3},{value:"Quand l&#39;utiliser",id:"quand-lutiliser-2",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"les-variables",children:"Les variables"})}),"\n",(0,r.jsx)(n.p,{children:"Que sont les variables en JS et comment les utiliser ?"}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["JavaScript offre trois fa\xe7ons principales de d\xe9clarer des variables : ",(0,r.jsx)(n.code,{children:"var"}),", ",(0,r.jsx)(n.code,{children:"let"}),", et ",(0,r.jsx)(n.code,{children:"const"}),". Chaque m\xe9thode a ses propres sp\xe9cificit\xe9s, avantages, et inconv\xe9nients. Comprendre quand et comment utiliser chacune d'elles est crucial pour \xe9crire un code propre et efficace."]}),"\n",(0,r.jsxs)(n.h2,{id:"1-var",children:["1. ",(0,r.jsx)(n.code,{children:"var"})]}),"\n",(0,r.jsx)(n.h3,{id:"r\xf4le",children:"R\xf4le"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"var"})," est la mani\xe8re traditionnelle de d\xe9clarer des variables en JavaScript. Avant ",(0,r.jsx)(n.strong,{children:"ES6 (ECMAScript 2015)"}),", c'\xe9tait la seule fa\xe7on de le faire. Les variables d\xe9clar\xe9es avec ",(0,r.jsx)(n.code,{children:"var"})," sont ",(0,r.jsx)(n.em,{children:"fonction-scope"})," (ou ",(0,r.jsx)(n.em,{children:"global-scope"})," si elles sont d\xe9clar\xe9es en dehors d'une fonction) et peuvent \xeatre r\xe9assign\xe9es."]}),"\n",(0,r.jsx)(n.h3,{id:"exemple",children:"Exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleVar() {\r\n  var x = 10;\r\n  if (true) {\r\n    var x = 20; // R\xe9assignation de x\r\n    console.log(x); // 20\r\n  }\r\n  console.log(x); // 20\r\n}\r\nexampleVar();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"exemple-en-react",children:"Exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React, { useState } from "react";\r\n\r\nfunction ExampleVar() {\r\n  var x = 10;\r\n  const handleClick = () => {\r\n    if (true) {\r\n      var x = 20; // R\xe9assignation de x\r\n      console.log(x); // 20\r\n    }\r\n    console.log(x); // 20\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleVar;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"contre-exemple",children:"Contre-exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleVar() {\r\n  var x = 10;\r\n  if (true) {\r\n    var x = 20; // R\xe9assignation de x\r\n    console.log(x); // 20\r\n  }\r\n  console.log(x); // 20\r\n}\r\nexampleVar();\r\n\r\nconsole.log(x); // Erreur : x n'est pas d\xe9fini globalement\n"})}),"\n",(0,r.jsx)(n.h4,{id:"contre-exemple-en-react",children:"Contre-exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React, { useState } from "react";\r\n\r\nfunction ExampleVar() {\r\n  var x = 10;\r\n  const handleClick = () => {\r\n    if (true) {\r\n      var x = 20; // R\xe9assignation de x\r\n      console.log(x); // 20\r\n    }\r\n    console.log(x); // 20\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleVar;\r\n\r\n// Erreur : x n\'est pas d\xe9fini globalement\n'})}),"\n",(0,r.jsx)(n.h3,{id:"avantages",children:"Avantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Compatible avec les anciennes versions de ",(0,r.jsx)(n.strong,{children:"JavaScript"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"D\xe9claration simple et rapide."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inconv\xe9nients",children:"Inconv\xe9nients"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Scope peu intuitif (",(0,r.jsx)(n.em,{children:"fonction-scope"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Peut entra\xeener des bugs difficiles \xe0 d\xe9boguer \xe0 cause du ",(0,r.jsx)(n.em,{children:"hoisting"})," (\xe9l\xe9vation)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"quand-lutiliser",children:"Quand l'utiliser"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"var"})," est g\xe9n\xe9ralement d\xe9conseill\xe9 pour le nouveau code. Il vaut mieux utiliser ",(0,r.jsx)(n.code,{children:"let"})," ou ",(0,r.jsx)(n.code,{children:"const"})," pour \xe9viter des comportements inattendus li\xe9s au scope."]})}),"\n",(0,r.jsxs)(n.h2,{id:"2-let",children:["2. ",(0,r.jsx)(n.code,{children:"let"})]}),"\n",(0,r.jsx)(n.h3,{id:"r\xf4le-1",children:"R\xf4le"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"let"})," introduit dans ",(0,r.jsx)(n.strong,{children:"ES6"}),", permet de d\xe9clarer des variables ",(0,r.jsx)(n.em,{children:"block-scope"}),", c'est-\xe0-dire qu'",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"elles sont limit\xe9es au bloc dans lequel elles sont d\xe9finies"})}),". Elles peuvent \xeatre r\xe9assign\xe9es."]}),"\n",(0,r.jsx)(n.h3,{id:"exemple-1",children:"Exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleLet() {\r\n  let x = 10;\r\n  if (true) {\r\n    let x = 20; // D\xe9claration d'une nouvelle variable x dans ce bloc\r\n    console.log(x); // 20\r\n  }\r\n  console.log(x); // 10\r\n}\r\nexampleLet();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"exemple-en-react-1",children:"Exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React, { useState } from "react";\r\n\r\nfunction ExampleLet() {\r\n  let x = 10;\r\n  const handleClick = () => {\r\n    if (true) {\r\n      let x = 20; // D\xe9claration d\'une nouvelle variable x dans ce bloc\r\n      console.log(x); // 20\r\n    }\r\n    console.log(x); // 10\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleLet;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"contre-exemple-1",children:"Contre-exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleLet() {\r\n  let x = 10;\r\n  if (true) {\r\n    let x = 20; // D\xe9claration d'une nouvelle variable x dans ce bloc\r\n    console.log(x); // 20\r\n  }\r\n  console.log(x); // 10\r\n}\r\n\r\nexampleLet();\r\nconsole.log(x); // Erreur : x n'est pas d\xe9fini globalement\n"})}),"\n",(0,r.jsx)(n.h4,{id:"contre-exemple-en-react-1",children:"Contre-exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import React, { useState } from \"react\";\r\n\r\nfunction ExampleLet() {\r\n  let x = 10;\r\n  const handleClick = () => {\r\n    if (true) {\r\n      let x = 20; // D\xe9claration d'une nouvelle variable x dans ce bloc\r\n      console.log(x); // 20\r\n    }\r\n    console.log(x); // 10\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleLet;\r\n\r\n// Erreur : x n'est pas d\xe9fini globalement\n"})}),"\n",(0,r.jsx)(n.h3,{id:"avantages-1",children:"Avantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Scope plus intuitif et localis\xe9 (",(0,r.jsx)(n.em,{children:"block-scope"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"R\xe9duit les risques de bugs li\xe9s au hoisting."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inconv\xe9nients-1",children:"Inconv\xe9nients"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Peut \xeatre r\xe9assign\xe9, ce qui peut parfois entra\xeener des erreurs si on oublie cette possibilit\xe9."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"quand-lutiliser-1",children:"Quand l'utiliser"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Utilise ",(0,r.jsx)(n.code,{children:"let"})," lorsque tu sais que la valeur de la variable doit changer au cours de l'ex\xe9cution de ton code."]})}),"\n",(0,r.jsxs)(n.h2,{id:"3-const",children:["3. ",(0,r.jsx)(n.code,{children:"const"})]}),"\n",(0,r.jsx)(n.h3,{id:"r\xf4le-2",children:"R\xf4le"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"const"}),", \xe9galement introduit dans ",(0,r.jsx)(n.strong,{children:"ES6"}),", permet de d\xe9clarer des variables qui ne peuvent pas \xeatre r\xe9assign\xe9es. Comme ",(0,r.jsx)(n.code,{children:"let"}),", ",(0,r.jsx)(n.code,{children:"const"})," est ",(0,r.jsx)(n.em,{children:"block-scope"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"exemple-2",children:"Exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleConst() {\r\n  const x = 10;\r\n  console.log(x); // 10\r\n}\r\nexampleConst();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"exemple-en-react-2",children:"Exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\r\n\r\nfunction ExampleConst() {\r\n  const x = 10;\r\n  const handleClick = () => {\r\n    console.log(x); // 10\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleConst;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"contre-exemple-2",children:"Contre-exemple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function exampleConst() {\r\n  const x = 10;\r\n  x = 20; // Erreur : R\xe9assignation d'une variable const\r\n  console.log(x); // Erreur\r\n}\r\nexampleConst();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"contre-exemple-en-react-2",children:"Contre-exemple en React"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\r\n\r\nfunction ExampleConst() {\r\n  const x = 10;\r\n  const handleClick = () => {\r\n    x = 20; // Erreur : R\xe9assignation d\'une variable const\r\n    console.log(x); // Erreur\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\r\nexport default ExampleConst;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"avantages-2",children:"Avantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Emp\xeache la r\xe9assignation, ce qui peut r\xe9duire les erreurs et rendre le code plus s\xfbr."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Block-scope"}),", donc comportement intuitif."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inconv\xe9nients-2",children:"Inconv\xe9nients"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Une fois assign\xe9e, la variable ne peut plus \xeatre r\xe9assign\xe9e, ce qui peut \xeatre limitant dans certains cas."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"quand-lutiliser-2",children:"Quand l'utiliser"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Utilise ",(0,r.jsx)(n.code,{children:"const"})," lorsque tu sais que la valeur de la variable ne doit pas changer apr\xe8s son initialisation. C'est id\xe9al pour les constantes ou les r\xe9f\xe9rences d'objets que tu ne souhaites pas r\xe9assigner."]})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"En r\xe9sum\xe9 :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"var"})})," : Utilis\xe9 pour d\xe9clarer des variables avec un scope de fonction ou global. D\xe9conseill\xe9 dans le code moderne \xe0 cause de son comportement inattendu avec le hoisting."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"let"})})," : Utilis\xe9 pour d\xe9clarer des variables avec un scope de bloc. Pratique lorsque tu sais que la variable devra \xeatre r\xe9assign\xe9e."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"const"})})," : Utilis\xe9 pour d\xe9clarer des variables avec un scope de bloc qui ne peuvent pas \xeatre r\xe9assign\xe9es. Id\xe9al pour les valeurs constantes."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Choisir entre ",(0,r.jsx)(n.code,{children:"let"})," et ",(0,r.jsx)(n.code,{children:"const"})," d\xe9pend de l'usage que tu souhaites faire de la variable. Privil\xe9gie ",(0,r.jsx)(n.code,{children:"const"})," autant que possible pour signaler que la variable ne devrait pas changer, et utilise ",(0,r.jsx)(n.code,{children:"let"})," lorsque tu as besoin de r\xe9assigner des valeurs."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>t});var r=l(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);